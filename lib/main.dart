import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart'; // getting the localizations generated using the arb files
import 'package:intl_flutter_app/card.dart';
import 'package:intl_flutter_app/task_screen.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(primarySwatch: Colors.purple),
      title: 'Localizations Sample App',
      localizationsDelegates: [
        // Elements below are factories that produce collections of localized values
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
        AppLocalizations.delegate,
      ],
      supportedLocales: [
        // Elements below are the languages that our app is going to support
        Locale('en', ''), // English, no country code
        Locale('es', ''), // Spanish, no country code
      ],
      home: MyHomePage(title: 'Internationalized Flutter App'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);
  final String title;
  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Color(0xFF2e2f43),
        title: Text(AppLocalizations.of(context)!
            .appBarTitle), // Using the translation generated by the AppLocalization class imported on top of this script
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: <Widget>[
            DrawerHeader(
              decoration: BoxDecoration(
                color: Color(0xFF2e2f43),
              ),
              child: Text(
                AppLocalizations.of(context)!.drawerTitle,
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 24,
                ),
              ), //ToDo: make this a localized message
            ),
            ListTile(
              leading: Icon(Icons.message),
              title: Text(AppLocalizations.of(context)!.drawerMessageItem),
              onTap: () {
                Navigator.pop(context);
              },
            ),
            ListTile(
              leading: Icon(Icons.settings),
              title: Text(AppLocalizations.of(context)!.drawerSettingsItem),
              onTap: () {
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
      body: SafeArea(
        child: Container(
            color: Color(0xfff6f5f8),
            width: double.infinity,
            padding: EdgeInsets.symmetric(horizontal: 24.0),
            child: Stack(
              children: [
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      margin: EdgeInsets.only(bottom: 20.0, top: 20.0),
                      child: Center(
                          child: Text(
                        AppLocalizations.of(context)!.taskScreenTitle,
                        textAlign: TextAlign.center,
                      )),
                    ),
                    Expanded(
                      child: ListView(
                        children: [
                          TaskCard(
                            // placeholder: AppLocalizations.of(context)!.untitledTaskPlaceHolder,
                            title: 'Lorem Ipsum',
                            description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean fringilla turpis ut risus feugiat laoreet. In placerat ullamcorper magna, non fermentum est porttitor in. Vestibulum sit amet gravida nisi. Phasellus vitae dolor et quam aliquet rutrum.',
                          ),
                          TaskCard(
                            // placeholder: AppLocalizations.of(context)!.untitledTaskPlaceHolder,
                            title: 'Lorem Ipsum 2',
                            description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean fringilla turpis ut risus feugiat laoreet.',
                          ),
                          TaskCard(
                            // placeholder: AppLocalizations.of(context)!.untitledTaskPlaceHolder,
                            description: 'sus',
                          ),
                          TaskCard(
                            // placeholder: AppLocalizations.of(context)!.untitledTaskPlaceHolder,
                            description: 'sus',
                          )
                        ],
                      ),
                    )
                  ],
                ),
                Positioned(
                  /// Floating action button
                  bottom: 20.0,
                  right: 0.0,
                  child: GestureDetector(
                    onTap: (){
                      Navigator.push(context, MaterialPageRoute(builder: (context) => TaskScreen()));
                    },
                    child: Container(
                      decoration: BoxDecoration(
                        color: Color(0xFF2e2f43),
                        borderRadius: BorderRadius.circular(25),
                      ),
                      child: Image(
                        width: 60,
                        image: AssetImage("assets/images/add_icon.png"),
                      ),
                    ),
                  ),
                )
              ],
            )),
      ),
      // body: Center(
      //   // Center is a layout widget. It takes a single child and positions it
      //   // in the middle of the parent.
      //   child: Column(
      //     // Column is also a layout widget. It takes a list of children and
      //     // arranges them vertically. By default, it sizes itself to fit its
      //     // children horizontally, and tries to be as tall as its parent.
      //     //
      //     // Invoke "debug painting" (press "p" in the console, choose the
      //     // "Toggle Debug Paint" action from the Flutter Inspector in Android
      //     // Studio, or the "Toggle Debug Paint" command in Visual Studio Code)
      //     // to see the wireframe for each widget.
      //     //
      //     // Column has various properties to control how it sizes itself and
      //     // how it positions its children. Here we use mainAxisAlignment to
      //     // center the children vertically; the main axis here is the vertical
      //     // axis because Columns are vertical (the cross axis would be
      //     // horizontal).
      //     mainAxisAlignment: MainAxisAlignment.center,
      //     children: <Widget>[
      //       Text(
      //         AppLocalizations.of(context)!.counterFeedbackText, // Using the translation generated by the AppLocalization class imported on top of this script
      //       ),
      //       Text(
      //         '$_counter',
      //         style: Theme.of(context).textTheme.headline4,
      //       ),
      //       Text(AppLocalizations.of(context)!.helloWorld), // Using the translation generated by the AppLocalization class imported on top of this script
      //     ],
      //   ),
      // ),
      // floatingActionButton: FloatingActionButton(
      //   backgroundColor: Color(0xFF2e2f43),
      //   onPressed: _incrementCounter,
      //   tooltip: 'Increment',
      //   child: const Icon(Icons.add),
      // ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
