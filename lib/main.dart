import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart'; // getting the localizations generated using the arb files
import 'package:intl_flutter_app/card.dart';
import 'package:intl_flutter_app/database_helper.dart';
import 'package:intl_flutter_app/task_screen.dart';

import 'models/task.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
          primarySwatch: Colors.purple), // Colour palette is defined here
      title: 'Localizations Sample App',
      localizationsDelegates: [
        // Elements below are factories that produce collections of localized values
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
        AppLocalizations.delegate,
      ],
      supportedLocales: [
        // Elements below are the languages that our app is going to support
        Locale('en', ''), // English, no country code
        Locale('es', ''), // Spanish, no country code
      ],
      home: MyHomePage(title: 'Internationalized Flutter App'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title}) : super(key: key);
  final String title;
  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  DatabaseHelper _dbhelper = DatabaseHelper();

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Color(0xFF2e2f43),
        title: Text(AppLocalizations.of(context)!
            .appBarTitle), // Using the translation generated by the AppLocalization class imported on top of this script
      ),
      drawer: Drawer(
        // Slide Menu
        child: ListView(
          padding: EdgeInsets.zero,
          children: <Widget>[
            DrawerHeader(
              decoration: BoxDecoration(
                color: Color(0xFF2e2f43),
              ),
              child: Text(
                AppLocalizations.of(context)!.drawerTitle,
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 24,
                ),
              ),
            ),
            ListTile(
              leading: Icon(Icons.settings), // Settings menu option
              title: Text(AppLocalizations.of(context)!.drawerSettingsItem),
              onTap: () {
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
      body: SafeArea(
        child: Container(
            color: Color(0xfff6f5f8),
            width: double.infinity,
            padding: EdgeInsets.symmetric(horizontal: 24.0),
            child: Stack(
              children: [
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      margin: EdgeInsets.only(bottom: 20.0, top: 20.0),
                      child: Center(
                          child: Text(
                        AppLocalizations.of(context)!.taskScreenTitle,
                        textAlign: TextAlign.center,
                      )),
                    ),
                    Expanded( //
                      child: FutureBuilder(
                      future: _dbhelper.getTasks(),
                      builder: (context, AsyncSnapshot<List<Task>> snapshot) {
                        return ScrollConfiguration(
                            behavior: NoGlowBehaviour(),
                            child: ListView.builder(
                              itemCount: snapshot.data?.length,
                              itemBuilder: (context, index) {
                                return GestureDetector(
                                    onTap: () {
                                      Navigator.push(
                                          context,
                                          MaterialPageRoute(
                                              builder: (context) => TaskScreen(
                                                  task:
                                                      snapshot.data?[index])));
                                    },
                                    child: TaskCard(
                                      title: snapshot.data?[index].title,
                                      // description: snapshot.data?[index].description,
                                    ));
                              },
                            ));
                      },
                    ))
                  ],
                ),
                Positioned(
                  /// Floating action button
                  bottom: 20.0,
                  right: 0.0,
                  child: GestureDetector(
                    onTap: () {
                      Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) => TaskScreen(task: null)))
                          .then((value) => setState(() {}));
                    },
                    child: Container(
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          colors: [
                            Color(0xff61627c),
                            Color(0xff2e2f43),
                          ],
                          begin: Alignment(0.0, -1.0),
                          end: Alignment(0.0, 1.0),
                        ),
                        borderRadius: BorderRadius.circular(25),
                      ),
                      child: Image(
                        width: 60,
                        image: AssetImage("assets/images/add_icon.png"),
                      ),
                    ),
                  ),
                )
              ],
            )),
      ),
    );
  }
}
