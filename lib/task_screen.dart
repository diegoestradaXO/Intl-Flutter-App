import 'package:flutter/material.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';
import 'package:intl_flutter_app/database_helper.dart';
import 'package:intl_flutter_app/models/todo.dart';
import 'package:intl_flutter_app/todo.dart';

import 'models/task.dart';

class TaskScreen extends StatefulWidget {
  final int? id;
  final Task? task;
  TaskScreen({this.id, this.task});

  @override
  _TaskScreenState createState() => _TaskScreenState();
}

class _TaskScreenState extends State<TaskScreen> {
  DatabaseHelper _dbhelper = DatabaseHelper();
  int? _taskId = 0;
  String? _taskTitle = "";
  @override
  void initState() {
    if (widget.task != null) {
      _taskTitle = widget.task?.title;
      _taskId = widget.task?.id;
      print('helo');
    }
    print("ID: ${widget.task?.id}");
  }

  Widget build(BuildContext context) {
    var t = AppLocalizations.of(context);

    return Scaffold(
        // appBar: AppBar(
        //   backgroundColor: Color(0xFF2e2f43),
        //   title: Text(t!.appBarTitle), // Using the translation generated by the AppLocalization class imported on top of this script
        // ),
        body: SafeArea(
      child: Container(
        child: Stack(
          children: [
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Padding(
                  padding: const EdgeInsets.only(top: 24.0, bottom: 10.0),
                  child: Row(
                    children: [
                      InkWell(
                        onTap: () {
                          Navigator.pop(context);
                        },
                        child: Padding(
                          padding: const EdgeInsets.all(24.0),
                          child: Image(
                            image:
                                AssetImage("assets/images/back_arrow_icon.png"),
                          ),
                        ),
                      ),
                      Expanded(
                          child: TextField(
                        onSubmitted: (value) async {
                          //lets check if field is not empty
                          if (value != "") {
                            //check is the task is null
                            if (widget.task == null) {
                              DatabaseHelper _dbhelper = DatabaseHelper();
                              Task _newTask = Task(title: value);
                              await _dbhelper.insertTask(_newTask);

                              print("The task has been created");
                            } else {
                              print('gonna update existing task');
                            }
                          }
                        },
                        controller: TextEditingController()..text = _taskTitle!,
                        decoration: InputDecoration(
                          hintText: t!.taskTitleTextAreaHint,
                          border: InputBorder.none,
                        ),
                        style: TextStyle(
                            fontSize: 26,
                            fontWeight: FontWeight.bold,
                            color: Color(0xFF2e2f43)),
                      ))
                    ],
                  ),
                ),
                Padding(
                  padding: EdgeInsets.only(bottom: 10.0),
                  child: TextField(
                    decoration: InputDecoration(
                        hintText: t.taskDescriptionTextAreaHint,
                        border: InputBorder.none,
                        contentPadding: EdgeInsets.symmetric(horizontal: 24.0)),
                  ),
                ),
                FutureBuilder(
                  // initialData: [],
                  future: _dbhelper.getTodos(_taskId),
                  builder: (context, AsyncSnapshot<List<Todo>> snapshot){
                    return Expanded(
                      child: ListView.builder(
                      itemCount: snapshot.data?.length,
                      itemBuilder: (context, index) {
                        return TodoWidget(text: snapshot.data?[index].title,isDone: false);
                      }
                      ),
                    );
                  },
                    ),
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 20.0),
                  child: Row(
                    children: [
                      Container(
                        margin: EdgeInsets.only(right: 20),
                        width: 25.0,
                        height: 25.0,
                        decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(5.0),
                            color: Colors.transparent,
                            border:
                                Border.all(color: Color(0xFF2e2f43), width: 2)),
                        
                      ),
                      Expanded(
                        child: TextField(
                          onSubmitted: (value) async {
                            if (value != "") {
                              //check is the task is null
                              if (widget.task != null) {
                                DatabaseHelper _dbhelper = DatabaseHelper();
                                Todo _newTodo = Todo(
                                    taskId: widget.task?.id,
                                    title: value,
                                    isDone: 0);
                                await _dbhelper.insertTodo(_newTodo);
                                setState(() {});

                                print("The todo has been created");
                              } else {
                                print('Task does not exist');
                              }
                            }
                          },
                          decoration: InputDecoration(
                            border: InputBorder.none,
                            hintText: 'Enter a toDo item ...',
                          ),
                        ),
                      )
                    ],
                  ),
                ),
              ],
            ),
            Positioned(
              /// Floating action button
              bottom: 20.0,
              right: 24.0,
              child: GestureDetector(
                onTap: () {
                  Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) => TaskScreen(
                                id: 0,
                              )));
                },
                child: Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        Color(0xffdd5858),
                        Color(0xffd62828),
                      ],
                      begin: Alignment(0.0, -1.0),
                      end: Alignment(0.0, 1.0),
                    ),
                    borderRadius: BorderRadius.circular(25),
                  ),
                  child: Image(
                    width: 60,
                    height: 60,
                    image: AssetImage("assets/images/delete_icon.png"),
                  ),
                ),
              ),
            )
          ],
        ),
      ),
    ));
  }
}
